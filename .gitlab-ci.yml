# This is a GitLab CI configuration to build the project as a docker image
# The file is generic enough to be dropped in a project containing a working Dockerfile
# Author: PARTH DABHI

image:
  name: docker/compose:1.26.2
  entrypoint: [""]

# Use this if your GitLab runner does not use socket binding
services:
  - docker:dind

stages:
  - build
  - deploy

variables:
  # When using dind service, we need to instruct docker, to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Note that if you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  # DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  # CONTAINER_RAPI_IMAGE: $CI_REGISTRY_IMAGE/web:$REF_NAME
  # CONTAINER_FE_IMAGE: $CI_REGISTRY_IMAGE/web:$REF_NAME
  CONTAINER_NGINX_IMAGE: $CI_REGISTRY_IMAGE/nginx:$REF_NAME
  # CONTAINER_POSTGRES_IMAGE: $CI_REGISTRY_IMAGE/postgres:$REF_NAME
  # CONTAINER_TAG_IMAGE: $CI_REGISTRY_IMAGE/web:$CI_COMMIT_TAG
  # Nginx image
  CONTAINER_BUILD_IMAGE_NGINX: $CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_SHORT_SHA
  CONTAINER_DEV_IMAGE_NGINX: $CI_REGISTRY_IMAGE/nginx:dev
  CONTAINER_STAGING_IMAGE_NGINX: $CI_REGISTRY_IMAGE/nginx:staging
  CONTAINER_RELEASE_IMAGE_NGINX: $CI_REGISTRY_IMAGE/nginx:latest
  CONTAINER_TAG_IMAGE_NGINX: $CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_TAG
  # Postgres image
  # CONTAINER_BUILD_IMAGE_POSTGRES: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHORT_SHA
  # CONTAINER_DEV_IMAGE_POSTGRES: $CI_REGISTRY_IMAGE/postgres:dev
  # CONTAINER_RELEASE_IMAGE_POSTGRES: $CI_REGISTRY_IMAGE/postgres:latest
  # CONTAINER_TAG_IMAGE_POSTGRES: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_TAG

before_script:
  # - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  # - export WEB_IMAGE=$IMAGE/web:$CI_BUILD_REF_SLUG
  # - export NGINX_IMAGE=$IMAGE/nginx:$CI_BUILD_REF_SLUG
  - apk add --no-cache openssh-client bash
  # - chmod +x ./setup_env.sh
  # - bash ./setup_env.sh
  - echo $CI_REGISTRY
  - echo $CI_REGISTRY_USER
  - echo $CI_JOB_TOKEN
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  # - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com

build_dev:
  stage: build
  tags:
    - docker
  only:
    - dev
  when: on_success
  script:
    - printenv
    - echo $CI_BUILD_REF
    - echo $CI_BUILD_REF_SLUG
    - echo $IMAGE
    # Nginx image building
    - echo $CONTAINER_BUILD_IMAGE_NGINX
    - echo $CONTAINER_DEV_IMAGE_NGINX
    - docker build --pull -t $CONTAINER_BUILD_IMAGE_NGINX -f ./nginx/Dockerfile.dev ./nginx/
    - docker push $CONTAINER_BUILD_IMAGE_NGINX
    - docker tag $CONTAINER_BUILD_IMAGE_NGINX $CONTAINER_DEV_IMAGE_NGINX
    - docker push $CONTAINER_DEV_IMAGE_NGINX
    # Postgres image building
    # - echo $CONTAINER_BUILD_IMAGE_NGINX
    # - echo $CONTAINER_DEV_IMAGE_POSTGRES
    # - docker build --pull -t $CONTAINER_BUILD_IMAGE_NGINX -f ./posrgres/Dockerfile.dev ./posrgres/
    # - docker push $CONTAINER_BUILD_IMAGE_NGINX
    # - docker tag $CONTAINER_BUILD_IMAGE_NGINX $CONTAINER_DEV_IMAGE_POSTGRES
    # - docker push $CONTAINER_DEV_IMAGE_POSTGRES
    - docker images


build_staging:
  stage: build
  tags:
    - docker
  only:
    - staging
  when: on_success
  script:
    # - printenv
    # - echo $CI_BUILD_REF
    # - echo $CI_BUILD_REF_SLUG
    # - echo $IMAGE
    # Nginx image building
    - echo $CONTAINER_BUILD_IMAGE_NGINX
    - echo $CONTAINER_STAGING_IMAGE_NGINX
    - docker build --pull -t $CONTAINER_BUILD_IMAGE_NGINX -f ./nginx/Dockerfile.staging ./nginx/
    - docker push $CONTAINER_BUILD_IMAGE_NGINX
    - docker tag $CONTAINER_BUILD_IMAGE_NGINX $CONTAINER_STAGING_IMAGE_NGINX
    - docker push $CONTAINER_STAGING_IMAGE_NGINX
    # Postgres image building
    # - echo $CONTAINER_BUILD_IMAGE_NGINX
    # - echo $CONTAINER_STAGING_IMAGE_POSTGRES
    # - docker build --pull -t $CONTAINER_BUILD_IMAGE_NGINX -f ./posrgres/Dockerfile.staging ./posrgres/
    # - docker push $CONTAINER_BUILD_IMAGE_NGINX
    # - docker tag $CONTAINER_BUILD_IMAGE_NGINX $CONTAINER_STAGING_IMAGE_POSTGRES
    # - docker push $CONTAINER_STAGING_IMAGE_POSTGRES
    - docker images

build_prod:
  stage: build
  tags:
    - docker
  only:
    - master
  when: on_success
  script:
    # - printenv
    # - echo $CI_BUILD_REF
    # - echo $CI_BUILD_REF_SLUG
    # - echo $IMAGE
    # - echo $WEB_IMAGE
    # - echo $NGINX_IMAGE
    # - docker pull $WEB_IMAGE || true
    # - docker pull $NGINX_IMAGE || true
    # - docker images
    # 
    # - docker build --pull --cache-from $CONTAINER_BUILD_IMAGE
    # Nginx image building
    - echo $CONTAINER_BUILD_IMAGE_NGINX
    - echo $CONTAINER_RELEASE_IMAGE_NGINX
    - docker build --pull -t $CONTAINER_BUILD_IMAGE_NGINX -f ./nginx/Dockerfile.prod ./nginx/
    - docker push $CONTAINER_BUILD_IMAGE_NGINX
    - docker tag $CONTAINER_BUILD_IMAGE_NGINX $CONTAINER_RELEASE_IMAGE_NGINX
    - docker push $CONTAINER_RELEASE_IMAGE_NGINX
    # Postgres image building
    # - echo $CONTAINER_BUILD_IMAGE_NGINX
    # - echo $CONTAINER_RELEASE_IMAGE_POSTGRES
    # - docker build --pull -t $CONTAINER_BUILD_IMAGE_NGINX -f ./posrgres/Dockerfile.prod ./posrgres/
    # - docker push $CONTAINER_BUILD_IMAGE_NGINX
    # - docker tag $CONTAINER_BUILD_IMAGE_NGINX $CONTAINER_RELEASE_IMAGE_POSTGRES
    # - docker push $CONTAINER_RELEASE_IMAGE_POSTGRES
    - docker images

deploy_dev:
  stage: deploy
  tags:
    - docker
  only:
    - dev
  # when: manual
  script:
    - apk add --no-cache bash
    - chmod +x ./setup_env.sh
    - bash ./setup_env.sh "gitlab.dev.env"
    - mkdir -p ~/.ssh
    # - echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    # - cat ~/.ssh/id_rsa
    # - chmod 700 ~/.ssh/id_rsa
    # - eval "$(ssh-agent -s)"
    # - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - chmod +x ./dotenv
    - ./dotenv -f dev.env set APP_CONTAINER_IMAGE_NAME=$CONTAINER_DEV_IMAGE
    - chmod +x ./deploy.dev.sh
    - chmod 400 $PRIVATE_KEY
    - ssh -o StrictHostKeyChecking=no -i $PRIVATE_KEY $SERVER_USER@$SERVER_IP 'mkdir -p ~/notification/dev/'
    - scp -o StrictHostKeyChecking=no -i $PRIVATE_KEY -r ./gitlab.dev.env ./dev.env ./docker-compose.dev.yml ./nginx/ ./postgres/ $SERVER_USER@$SERVER_IP:~/notification/dev/
    - bash ./deploy.dev.sh


deploy_staging:
  stage: deploy
  tags:
    - docker
  only:
    - staging
  when: manual
  script:
    - apk add --no-cache bash
    - chmod +x ./setup_env.sh
    - bash ./setup_env.sh "gitlab.staging.env"
    - mkdir -p ~/.ssh
    # - echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    # - cat ~/.ssh/id_rsa
    # - chmod 700 ~/.ssh/id_rsa
    # - eval "$(ssh-agent -s)"
    # - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - chmod +x ./dotenv
    - ./dotenv -f staging.env set APP_CONTAINER_IMAGE_NAME=$CONTAINER_STAGING_IMAGE
    - chmod +x ./deploy.staging.sh
    - chmod 400 $PRIVATE_KEY
    - ssh -o StrictHostKeyChecking=no -i $PRIVATE_KEY $SERVER_USER@$SERVER_IP 'mkdir -p ~/notification/staging/'
    - scp -o StrictHostKeyChecking=no -i $PRIVATE_KEY -r ./gitlab.staging.env ./staging.env ./docker-compose.staging.yml ./nginx/ ./postgres/ $SERVER_USER@$SERVER_IP:~/notification/staging/
    - bash ./deploy.staging.sh

deploy_prod:
  stage: deploy
  tags:
    - docker
  only:
    - master
  when: manual
  script:
    - apk add --no-cache bash
    - chmod +x ./setup_env.sh
    - bash ./setup_env.sh "gitlab.prod.env"
    - mkdir -p ~/.ssh
    # - echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    # - cat ~/.ssh/id_rsa
    # - chmod 700 ~/.ssh/id_rsa
    # - eval "$(ssh-agent -s)"
    # - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - chmod +x ./dotenv
    - ./dotenv -f prod.env set APP_CONTAINER_IMAGE_NAME=$CONTAINER_STAGING_IMAGE
    - chmod +x ./deploy.prod.sh
    - chmod 400 $PRIVATE_KEY
    - ssh -o StrictHostKeyChecking=no -i $PRIVATE_KEY $SERVER_USER@$SERVER_IP 'mkdir -p ~/notification/prod/'
    - scp -o StrictHostKeyChecking=no -i $PRIVATE_KEY -r ./gitlab.prod.env ./prod.env ./docker-compose.prod.yml ./nginx/ ./postgres/ $SERVER_USER@$SERVER_IP:~/notification/prod/
    - bash ./deploy.prod.sh